Terminating the Algorithm
=========================

When we check the tail of ``logger.csv`` file in :ref:`logging`, we realize
that the iteration count, :math:`k`, is at 100. It is not a coincidence; in
``polo``, the default termination criterion is to have "100 iterations." Just
as most parts of the algorithm, the termination criterion can also be easily
changed, or even replaced by a custom *terminator*. To demonstrate this, we
revisit the example in :numref:`code-logger`, and change the default terminator
to a ``value`` terminator, which terminates the algorithm if the change in the
loss value satisfies certain conditions (see :numref:`code-terminator`).

.. literalinclude:: /examples/getting-started/terminator.cpp
  :language: cpp
  :caption: getting-started/terminator.cpp
  :name: code-terminator
  :linenos:
  :emphasize-lines: 37-38,43,46,50-51,55

In this example, we first construct a ``value`` terminator with absolute and
relative tolerances of ``1E-3`` and ``1E-8``, respectively. This means that
``terminator`` will stop the algorithm when

.. math::

  {\left\lvert\operatorname{f}\left(x_{k-1}\right) -
    \operatorname{f}\left(x_{k}\right)\right\rvert} <
    \delta_{\text{abs}} = 10^{-3} \quad \text{or} \quad
  {\left\lvert\frac{\operatorname{f}\left(x_{k-1}\right) -
    \operatorname{f}\left(x_{k}\right)}{\operatorname{f}\left(x_{k-1}\right)
    + \epsilon}\right\rvert} < \delta_{\text{rel}} = 10^{-8} \,,

where :math:`\epsilon` is, by default, the `machine epsilon
<https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon>`_, and is
used to prevent dividing by zero [#f1]_. Then, we provide ``terminator`` to the
``solve`` method of our algorithm as the third argument. Finally, compared to
:numref:`code-logger`, we change how the function values are logged to
``terminator.csv`` and output to ``cout`` in :numref:`code-terminator`.
In the code, we use `std::fixed <https://en.cppreference.com/w/cpp/io/manip/fixed>`_
to print floating-point numbers in a fixed, 6-digit precision (default)
format, and ``getk``, ``gett`` and ``getf`` member functions of ``log`` [#f2]_
to get, respectively, the iteration count, wall-clock time and the loss value
at each logged iteration of the algorithm.

We append the following lines to ``CMakeLists.txt``

.. literalinclude:: /examples/getting-started/CMakeLists.txt
  :language: cmake
  :lines: 22-23

and build the project. Running the executable should give the output::

  Optimum: 222.288758
  Optimizer: [0.042932,0.140170,-0.352319,0.907892,1.224258,0.230179,0.558908,1.755445,0.474237,0.592185,-0.117172,0.669261,-2.293000,1.374797,].

In this example, we realize that the "optimum" (i.e., loss value at the last
iterate when the algorithm is stopped by the terminator) is lower than the one
obtained in :ref:`logging`. When we check the tail of ``terminator.csv``, we
observe the following::

  1307,52.607826,222.293771
  1308,52.645069,222.292765
  1309,52.680067,222.291760
  1310,52.715353,222.290757
  1311,52.751290,222.289757

The algorithm stops at the :math:`1312^{\text{th}}` iteration because the
absolute change in the loss value becomes less than the tolerance we have asked
for. Using the Python script in :numref:`code-terminator-plot`, we obtain a
figure similar to :numref:`fig-terminator`.

.. literalinclude:: /examples/getting-started/terminator.py
  :language: python
  :caption: getting-started/terminator.py
  :name: code-terminator-plot
  :emphasize-lines: 8,31-32

.. figure:: /examples/getting-started/terminator.*
  :name: fig-terminator
  :align: center

  Loss values generated by the algorithm in :numref:`code-terminator`.

In :numref:`fig-terminator`, we observe that the ``value`` terminator with the
selected tolerances has resulted in more than 12 times more iterations (left)
compared to the default ``iteration`` terminator with 100 iterations. Because
we run both algorithms serially using one CPU, this directly translates to the
wall-clock runtimes (right) of the algorithms (cf. :numref:`fig-logger`).

.. rubric:: Footnotes

.. [#f1] More information on terminators is provided in
  :ref:`utilities-terminator`.
.. [#f2] More information on state loggers and their logged data is provided in
  :ref:`utilities-logger`.
